# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import core.proto.flexe_pb2 as flexe__pb2


class FlexeStub(object):
    """Defines the service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.fit = channel.unary_unary(
                '/flexe.Flexe/fit',
                request_serializer=flexe__pb2.TTRequest.SerializeToString,
                response_deserializer=flexe__pb2.ModelReply.FromString,
                )
        self.evaluate = channel.unary_unary(
                '/flexe.Flexe/evaluate',
                request_serializer=flexe__pb2.TTRequest.SerializeToString,
                response_deserializer=flexe__pb2.EvaluateReply.FromString,
                )
        self.update_model = channel.unary_unary(
                '/flexe.Flexe/update_model',
                request_serializer=flexe__pb2.TTRequest.SerializeToString,
                response_deserializer=flexe__pb2.GenericResponse.FromString,
                )
        self.aggregate_evaluate = channel.unary_unary(
                '/flexe.Flexe/aggregate_evaluate',
                request_serializer=flexe__pb2.TTRequest.SerializeToString,
                response_deserializer=flexe__pb2.EvaluateReply.FromString,
                )
        self.aggregate_fit = channel.unary_unary(
                '/flexe.Flexe/aggregate_fit',
                request_serializer=flexe__pb2.ModelRequest.SerializeToString,
                response_deserializer=flexe__pb2.ModelReply.FromString,
                )
        self.aggregate_sync_fit = channel.unary_unary(
                '/flexe.Flexe/aggregate_sync_fit',
                request_serializer=flexe__pb2.GenericRequest.SerializeToString,
                response_deserializer=flexe__pb2.ModelReply.FromString,
                )
        self.server_evaluate = channel.unary_unary(
                '/flexe.Flexe/server_evaluate',
                request_serializer=flexe__pb2.TTRequest.SerializeToString,
                response_deserializer=flexe__pb2.EvaluateReply.FromString,
                )
        self.store_model = channel.unary_unary(
                '/flexe.Flexe/store_model',
                request_serializer=flexe__pb2.ModelRequest.SerializeToString,
                response_deserializer=flexe__pb2.GenericResponse.FromString,
                )
        self.initialize_parameters = channel.unary_unary(
                '/flexe.Flexe/initialize_parameters',
                request_serializer=flexe__pb2.TTRequest.SerializeToString,
                response_deserializer=flexe__pb2.ModelReply.FromString,
                )
        self.end = channel.unary_unary(
                '/flexe.Flexe/end',
                request_serializer=flexe__pb2.GenericRequest.SerializeToString,
                response_deserializer=flexe__pb2.GenericResponse.FromString,
                )


class FlexeServicer(object):
    """Defines the service
    """

    def fit(self, request, context):
        """Client Functions 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def evaluate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def aggregate_evaluate(self, request, context):
        """Server Functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def aggregate_fit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def aggregate_sync_fit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def server_evaluate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def store_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initialize_parameters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def end(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlexeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'fit': grpc.unary_unary_rpc_method_handler(
                    servicer.fit,
                    request_deserializer=flexe__pb2.TTRequest.FromString,
                    response_serializer=flexe__pb2.ModelReply.SerializeToString,
            ),
            'evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.evaluate,
                    request_deserializer=flexe__pb2.TTRequest.FromString,
                    response_serializer=flexe__pb2.EvaluateReply.SerializeToString,
            ),
            'update_model': grpc.unary_unary_rpc_method_handler(
                    servicer.update_model,
                    request_deserializer=flexe__pb2.TTRequest.FromString,
                    response_serializer=flexe__pb2.GenericResponse.SerializeToString,
            ),
            'aggregate_evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.aggregate_evaluate,
                    request_deserializer=flexe__pb2.TTRequest.FromString,
                    response_serializer=flexe__pb2.EvaluateReply.SerializeToString,
            ),
            'aggregate_fit': grpc.unary_unary_rpc_method_handler(
                    servicer.aggregate_fit,
                    request_deserializer=flexe__pb2.ModelRequest.FromString,
                    response_serializer=flexe__pb2.ModelReply.SerializeToString,
            ),
            'aggregate_sync_fit': grpc.unary_unary_rpc_method_handler(
                    servicer.aggregate_sync_fit,
                    request_deserializer=flexe__pb2.GenericRequest.FromString,
                    response_serializer=flexe__pb2.ModelReply.SerializeToString,
            ),
            'server_evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.server_evaluate,
                    request_deserializer=flexe__pb2.TTRequest.FromString,
                    response_serializer=flexe__pb2.EvaluateReply.SerializeToString,
            ),
            'store_model': grpc.unary_unary_rpc_method_handler(
                    servicer.store_model,
                    request_deserializer=flexe__pb2.ModelRequest.FromString,
                    response_serializer=flexe__pb2.GenericResponse.SerializeToString,
            ),
            'initialize_parameters': grpc.unary_unary_rpc_method_handler(
                    servicer.initialize_parameters,
                    request_deserializer=flexe__pb2.TTRequest.FromString,
                    response_serializer=flexe__pb2.ModelReply.SerializeToString,
            ),
            'end': grpc.unary_unary_rpc_method_handler(
                    servicer.end,
                    request_deserializer=flexe__pb2.GenericRequest.FromString,
                    response_serializer=flexe__pb2.GenericResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexe.Flexe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Flexe(object):
    """Defines the service
    """

    @staticmethod
    def fit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/fit',
            flexe__pb2.TTRequest.SerializeToString,
            flexe__pb2.ModelReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/evaluate',
            flexe__pb2.TTRequest.SerializeToString,
            flexe__pb2.EvaluateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/update_model',
            flexe__pb2.TTRequest.SerializeToString,
            flexe__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def aggregate_evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/aggregate_evaluate',
            flexe__pb2.TTRequest.SerializeToString,
            flexe__pb2.EvaluateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def aggregate_fit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/aggregate_fit',
            flexe__pb2.ModelRequest.SerializeToString,
            flexe__pb2.ModelReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def aggregate_sync_fit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/aggregate_sync_fit',
            flexe__pb2.GenericRequest.SerializeToString,
            flexe__pb2.ModelReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def server_evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/server_evaluate',
            flexe__pb2.TTRequest.SerializeToString,
            flexe__pb2.EvaluateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def store_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/store_model',
            flexe__pb2.ModelRequest.SerializeToString,
            flexe__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def initialize_parameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/initialize_parameters',
            flexe__pb2.TTRequest.SerializeToString,
            flexe__pb2.ModelReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def end(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexe.Flexe/end',
            flexe__pb2.GenericRequest.SerializeToString,
            flexe__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
